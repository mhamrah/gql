// @generated
// generated by gql

package sample

import (
	"fmt"
	"context"
	"io/ioutil"
	"github.com/mhamrah/gql"
	"github.com/mhamrah/gql/ast"
	"github.com/mhamrah/gql/parser"
)

type Query interface {
	Human(ctx context.Context, id string) (Human, error)
}

type query_impl struct {
	impl Query
	schema ast.Schema
}

func New(impl Query) gql.Service {
	b, _ := ioutil.ReadFile("sample.graphql")
	doc, _ := parser.ParseBytes(b)
	return query_impl{impl: impl, schema: doc.Schema}
}

func (s query_impl) Handlers() map[string]gql.GqlFunc {
	return map[string]gql.GqlFunc{
		"human": s.Human,
	}
}

func (s query_impl) Schema() ast.Schema {
	return s.schema
}

func (s query_impl) Human(ctx context.Context, operation ast.Selection) (gql.NamedLookup, error) {

	id := ""
	if input, ok := operation.Field.Arguments["id"]; ok {
		var err error
		if !input.Value.IsValid() {
			return nil, fmt.Errorf("%v does not contain a valid value", id)
		}
		id, err = ast.GetString(input.Value)
		if err != nil {
			return nil, err
		}
	}

	success, err := s.impl.Human(ctx, id)
	if err != nil {
		return nil, err
	}
	return success, nil
}
