// @generated
// generated by gql

package sample

import (
	"context"
	"github.com/mhamrah/gql"
)

type Query interface {
	Human(ctx context.Context, id string) (Human, error)
}

type query_impl struct {
	impl Query
}

func New(impl Query) gql.Service {
	return query_impl{impl: impl}
}

func (s query_impl) Handlers() map[string]gql.HandlerFunc {
	return map[string]gql.HandlerFunc{
		"human": s.Human,
	}
}

func (s query_impl) Schema() gql.Schema {
	return gql.Schema{}
}

func (s query_impl) Human(ctx context.Context, operation gql.Selection) (gql.Selectable, error) {

	id, err := operation.Field.StringValue("id", "", true)
	if err != nil {
		return nil, err
	}

	success, err := s.impl.Human(ctx, id)
	if err != nil {
		return nil, err
	}
	return success, nil
}
