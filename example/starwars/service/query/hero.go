// Code generated by thriftrw
// @generated

package query

import (
	"errors"
	"fmt"
	"github.com/mhamrah/gql/example/starwars"
	"github.com/thriftrw/thriftrw-go/wire"
	"strings"
)

type HeroArgs struct {
	Episode starwars.Episode `json:"episode"`
}

func (v *HeroArgs) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	w, err = v.Episode.ToWire()
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _Episode_Read(w wire.Value) (starwars.Episode, error) {
	var v starwars.Episode
	err := v.FromWire(w)
	return v, err
}

func (v *HeroArgs) FromWire(w wire.Value) error {
	var err error
	episodeIsSet := false
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TI32 {
				v.Episode, err = _Episode_Read(field.Value)
				if err != nil {
					return err
				}
				episodeIsSet = true
			}
		}
	}
	if !episodeIsSet {
		return errors.New("field Episode of HeroArgs is required")
	}
	return nil
}

func (v *HeroArgs) String() string {
	var fields [1]string
	i := 0
	fields[i] = fmt.Sprintf("Episode: %v", v.Episode)
	i++
	return fmt.Sprintf("HeroArgs{%v}", strings.Join(fields[:i], ", "))
}

func (v *HeroArgs) MethodName() string {
	return "Hero"
}

func (v *HeroArgs) EnvelopeType() wire.EnvelopeType {
	return wire.Call
}

type HeroResult struct {
	Success *starwars.Character `json:"success,omitempty"`
}

func (v *HeroResult) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Success != nil {
		w, err = v.Success.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 0, Value: w}
		i++
	}
	if i != 1 {
		return wire.Value{}, fmt.Errorf("HeroResult should have exactly one field: got %v fields", i)
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _Character_Read(w wire.Value) (*starwars.Character, error) {
	var v starwars.Character
	err := v.FromWire(w)
	return &v, err
}

func (v *HeroResult) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 0:
			if field.Value.Type() == wire.TStruct {
				v.Success, err = _Character_Read(field.Value)
				if err != nil {
					return err
				}
			}
		}
	}
	count := 0
	if v.Success != nil {
		count++
	}
	if count != 1 {
		return fmt.Errorf("HeroResult should have exactly one field: got %v fields", count)
	}
	return nil
}

func (v *HeroResult) String() string {
	var fields [1]string
	i := 0
	if v.Success != nil {
		fields[i] = fmt.Sprintf("Success: %v", v.Success)
		i++
	}
	return fmt.Sprintf("HeroResult{%v}", strings.Join(fields[:i], ", "))
}

func (v *HeroResult) MethodName() string {
	return "Hero"
}

func (v *HeroResult) EnvelopeType() wire.EnvelopeType {
	return wire.Reply
}

var HeroHelper = struct {
	IsException    func(error) bool
	Args           func(episode starwars.Episode) *HeroArgs
	WrapResponse   func(*starwars.Character, error) (*HeroResult, error)
	UnwrapResponse func(*HeroResult) (*starwars.Character, error)
}{}

func init() {
	HeroHelper.IsException = func(err error) bool {
		switch err.(type) {
		default:
			return false
		}
	}
	HeroHelper.Args = func(episode starwars.Episode) *HeroArgs {
		return &HeroArgs{Episode: episode}
	}
	HeroHelper.WrapResponse = func(success *starwars.Character, err error) (*HeroResult, error) {
		if err == nil {
			return &HeroResult{Success: success}, nil
		}
		return nil, err
	}
	HeroHelper.UnwrapResponse = func(result *HeroResult) (success *starwars.Character, err error) {
		if result.Success != nil {
			success = result.Success
			return
		}
		err = errors.New("expected a non-void result")
		return
	}
}
