// Code generated by thriftrw
// @generated

package query

import (
	"errors"
	"fmt"
	"github.com/mhamrah/gql/example/starwars"
	"github.com/thriftrw/thriftrw-go/wire"
	"strings"
)

type HumanArgs struct {
	Request *starwars.IdRequest `json:"request,omitempty"`
}

func (v *HumanArgs) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Request != nil {
		w, err = v.Request.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *HumanArgs) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TStruct {
				v.Request, err = _IdRequest_Read(field.Value)
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *HumanArgs) String() string {
	var fields [1]string
	i := 0
	if v.Request != nil {
		fields[i] = fmt.Sprintf("Request: %v", v.Request)
		i++
	}
	return fmt.Sprintf("HumanArgs{%v}", strings.Join(fields[:i], ", "))
}

func (v *HumanArgs) MethodName() string {
	return "Human"
}

func (v *HumanArgs) EnvelopeType() wire.EnvelopeType {
	return wire.Call
}

type HumanResult struct {
	Success *starwars.Human `json:"success,omitempty"`
}

func (v *HumanResult) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Success != nil {
		w, err = v.Success.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 0, Value: w}
		i++
	}
	if i != 1 {
		return wire.Value{}, fmt.Errorf("HumanResult should have exactly one field: got %v fields", i)
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _Human_Read(w wire.Value) (*starwars.Human, error) {
	var v starwars.Human
	err := v.FromWire(w)
	return &v, err
}

func (v *HumanResult) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 0:
			if field.Value.Type() == wire.TStruct {
				v.Success, err = _Human_Read(field.Value)
				if err != nil {
					return err
				}
			}
		}
	}
	count := 0
	if v.Success != nil {
		count++
	}
	if count != 1 {
		return fmt.Errorf("HumanResult should have exactly one field: got %v fields", count)
	}
	return nil
}

func (v *HumanResult) String() string {
	var fields [1]string
	i := 0
	if v.Success != nil {
		fields[i] = fmt.Sprintf("Success: %v", v.Success)
		i++
	}
	return fmt.Sprintf("HumanResult{%v}", strings.Join(fields[:i], ", "))
}

func (v *HumanResult) MethodName() string {
	return "Human"
}

func (v *HumanResult) EnvelopeType() wire.EnvelopeType {
	return wire.Reply
}

var HumanHelper = struct {
	IsException    func(error) bool
	Args           func(request *starwars.IdRequest) *HumanArgs
	WrapResponse   func(*starwars.Human, error) (*HumanResult, error)
	UnwrapResponse func(*HumanResult) (*starwars.Human, error)
}{}

func init() {
	HumanHelper.IsException = func(err error) bool {
		switch err.(type) {
		default:
			return false
		}
	}
	HumanHelper.Args = func(request *starwars.IdRequest) *HumanArgs {
		return &HumanArgs{Request: request}
	}
	HumanHelper.WrapResponse = func(success *starwars.Human, err error) (*HumanResult, error) {
		if err == nil {
			return &HumanResult{Success: success}, nil
		}
		return nil, err
	}
	HumanHelper.UnwrapResponse = func(result *HumanResult) (success *starwars.Human, err error) {
		if result.Success != nil {
			success = result.Success
			return
		}
		err = errors.New("expected a non-void result")
		return
	}
}
