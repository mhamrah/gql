// Code generated by thriftrw
// @generated

package queryclient

import (
	"github.com/mhamrah/gql/example/starwars"
	"github.com/mhamrah/gql/example/starwars/service/query"
	"github.com/thriftrw/thriftrw-go/protocol"
	"github.com/thriftrw/thriftrw-go/wire"
	yarpc "github.com/yarpc/yarpc-go"
	"github.com/yarpc/yarpc-go/encoding/thrift"
	"github.com/yarpc/yarpc-go/transport"
	"golang.org/x/net/context"
)

type Interface interface {
	Droid(ctx context.Context, reqMeta yarpc.CallReqMeta, request *starwars.IdRequest) (*starwars.Droid, yarpc.CallResMeta, error)
	Hero(ctx context.Context, reqMeta yarpc.CallReqMeta, episode starwars.Episode) (*starwars.Character, yarpc.CallResMeta, error)
	Human(ctx context.Context, reqMeta yarpc.CallReqMeta, request *starwars.IdRequest) (*starwars.Human, yarpc.CallResMeta, error)
}

func New(c transport.Channel, opts ...thrift.ClientOption) Interface {
	return client{c: thrift.New(thrift.Config{Service: "Query", Channel: c, Protocol: protocol.Binary}, opts...)}
}

type client struct{ c thrift.Client }

func (c client) Droid(ctx context.Context, reqMeta yarpc.CallReqMeta, request *starwars.IdRequest) (success *starwars.Droid, resMeta yarpc.CallResMeta, err error) {
	args := query.DroidHelper.Args(request)
	var body wire.Value
	body, resMeta, err = c.c.Call(ctx, reqMeta, args)
	if err != nil {
		return
	}
	var result query.DroidResult
	if err = result.FromWire(body); err != nil {
		return
	}
	success, err = query.DroidHelper.UnwrapResponse(&result)
	return
}

func (c client) Hero(ctx context.Context, reqMeta yarpc.CallReqMeta, episode starwars.Episode) (success *starwars.Character, resMeta yarpc.CallResMeta, err error) {
	args := query.HeroHelper.Args(episode)
	var body wire.Value
	body, resMeta, err = c.c.Call(ctx, reqMeta, args)
	if err != nil {
		return
	}
	var result query.HeroResult
	if err = result.FromWire(body); err != nil {
		return
	}
	success, err = query.HeroHelper.UnwrapResponse(&result)
	return
}

func (c client) Human(ctx context.Context, reqMeta yarpc.CallReqMeta, request *starwars.IdRequest) (success *starwars.Human, resMeta yarpc.CallResMeta, err error) {
	args := query.HumanHelper.Args(request)
	var body wire.Value
	body, resMeta, err = c.c.Call(ctx, reqMeta, args)
	if err != nil {
		return
	}
	var result query.HumanResult
	if err = result.FromWire(body); err != nil {
		return
	}
	success, err = query.HumanHelper.UnwrapResponse(&result)
	return
}
